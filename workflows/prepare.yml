##.title
## ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
##
## Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
## source code is governed by an MIT-style license described in the LICENSE
## file located in this project's root directory.
##
## See: https://opensource.org/license/mit
##
## ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
##.title~

name: Prepare Release Version

## -----------------------------------------------------------------------------

on:
  push:
    branches:
      - main

## -----------------------------------------------------------------------------

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the full repository history.
      # `fetch-depth: 0` is required to get all history for pushing tags/commits.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Get the first line of the latest commit message.
      - name: Get commit message
        id: get_commit
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 HEAD | head -n 1)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT

      # Step 3: Check if the commit message starts with '+' to decide whether to proceed.
      - name: Check for release trigger
        id: check_message
        run: |
          if [[ "${{ steps.get_commit.outputs.COMMIT_MSG }}" == +* ]]; then
            echo "PROCEED=true" >> $GITHUB_OUTPUT
            echo "Release triggered by '+' commit."
          else
            echo "PROCEED=false" >> $GITHUB_OUTPUT
            echo "Standard commit. No release action taken."
          fi

      # --- The following steps only run if the commit message starts with '+' ---

      - name: Set up Dart
        if: steps.check_message.outputs.PROCEED == 'true'
        uses: dart-lang/setup-dart@v1

      - name: Format and Fix Dart Code
        if: steps.check_message.outputs.PROCEED == 'true'
        run: |
          dart format .
          dart fix --apply

      # Step 4: Extract the version from pubspec.yaml.
      - name: Extract version from pubspec.yaml
        if: steps.check_message.outputs.PROCEED == 'true'
        id: get_version
        run: |
          VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //')
          echo "Version extracted from pubspec.yaml: $VERSION"
          echo "PUBSPEC_VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Step 5: Update CHANGELOG.md using the extracted version and commit message.
      - name: Update CHANGELOG.md
        if: steps.check_message.outputs.PROCEED == 'true'
        run: |
          # Use the commit message (with the leading '+' removed) as the release notes.
          RELEASE_NOTES=$(echo "${{ steps.get_commit.outputs.COMMIT_MSG }}" | sed 's/^+//')
          dart run .github/scripts/update_changelog.dart "${{ steps.get_version.outputs.PUBSPEC_VERSION }}" "$RELEASE_NOTES"

      # Step 6: Commit the automated changes (formatting, changelog, etc.).
      - name: Commit automated changes
        if: steps.check_message.outputs.PROCEED == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          # Check if there are changes to commit before committing.
          if ! git diff --staged --quiet; then
            git commit -m "ci: bump version to v${{ steps.get_version.outputs.PUBSPEC_VERSION }}"
          else
            echo "No changes to commit."
          fi

      # Step 7: Force-Create and Push Git Tag.
      # WARNING: This will DELETE and REPLACE an existing tag with the same name.
      - name: Force-Create and Push Git Tag
        if: steps.check_message.outputs.PROCEED == 'true'
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.PUBSPEC_VERSION }}"
          echo "Preparing to create or replace tag: $TAG_NAME"
          
          # Delete the tag on the remote repository if it exists.
          # The `|| true` part ensures the script doesn't fail if the tag doesn't exist to be deleted.
          git push --delete origin "$TAG_NAME" || true
          
          # Create the tag locally. The -f flag means "force", which will overwrite a local tag if it exists.
          git tag -a -f "$TAG_NAME" -m "Release version ${TAG_NAME}"
          
          # Push the new tag to the remote.
          git push origin "$TAG_NAME"
          
          echo "Successfully created or replaced tag ${TAG_NAME}."

      # Step 8: Push the automated commit back to the main branch.
      - name: Push automated commit
        if: steps.check_message.outputs.PROCEED == 'true'
        run: |
          # We need to pull first in case another workflow has pushed a commit.
          git pull --rebase
          git push origin main